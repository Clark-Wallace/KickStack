name: KickStack CI

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'

env:
  NODE_VERSION: '18'
  POSTGRES_PASSWORD: test123
  POSTGRES_DB: kickstack_test
  POSTGRES_USER: postgres
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432
  JWT_SECRET: test-jwt-secret-for-ci-only
  SITE_URL: http://localhost:3000

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          # Install PostgreSQL client tools
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done
          
          # Create test schema
          PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U postgres -d $POSTGRES_DB -c "
            -- Create auth schema for GoTrue functions
            CREATE SCHEMA IF NOT EXISTS auth;
            
            -- Create basic auth functions needed for RLS
            CREATE OR REPLACE FUNCTION auth.uid() RETURNS uuid AS \$\$
              SELECT coalesce(
                nullif(current_setting('request.jwt.claim.sub', true), ''),
                (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
              )::uuid;
            \$\$ LANGUAGE sql STABLE;
            
            CREATE OR REPLACE FUNCTION auth.jwt() RETURNS jsonb AS \$\$
              SELECT coalesce(
                nullif(current_setting('request.jwt.claims', true), '')::jsonb,
                '{}'::jsonb
              );
            \$\$ LANGUAGE sql STABLE;
            
            -- Enable RLS
            ALTER DATABASE $POSTGRES_DB SET row_security = on;
          "

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run typecheck

      - name: Run AI CLI tests
        working-directory: ai/cli
        run: |
          npm ci
          npm run test

      - name: Run orchestrator tests
        working-directory: ai/orchestrator
        run: |
          npm ci
          npm run test

      - name: Run functions gateway tests
        working-directory: api/fngw
        run: |
          npm ci
          npm run test

      - name: Run web dashboard tests
        working-directory: web
        run: |
          npm ci
          npm run test

      - name: Build AI CLI
        working-directory: ai/cli
        run: npm run build

      - name: Build orchestrator
        working-directory: ai/orchestrator
        run: npm run build

      - name: Build functions gateway
        working-directory: api/fngw
        run: npm run build

      - name: Build web dashboard
        working-directory: web
        run: npm run build

      - name: Test database policies
        run: |
          # Test owner policy creation
          cd ai/cli
          npm run build
          node dist/index.js add-policy owner --table=test_table --help
          
          # Test public_read policy creation  
          node dist/index.js add-policy public_read --table=test_table --help

      - name: Integration test with Docker Compose
        run: |
          # Start infrastructure
          docker-compose -f infra/docker-compose.yml up -d
          
          # Wait for services
          sleep 30
          
          # Test PostgREST health
          curl -f http://localhost:3001/ || exit 1
          
          # Test GoTrue health  
          curl -f http://localhost:9999/health || echo "GoTrue may not have /health endpoint"
          
          # Clean up
          docker-compose -f infra/docker-compose.yml down

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified