version: '3.8'

services:
  # PostgreSQL database - Primary database for PostgREST and RLS
  postgres:
    image: postgres:16-alpine
    container_name: kickstack-postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: kick
      POSTGRES_PASSWORD: kickpass
      POSTGRES_DB: kickstack
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kick -d kickstack"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kickstack-network

  # PostgREST - Auto-generate REST API from database schema
  postgrest:
    image: postgrest/postgrest:v12.0.2
    container_name: kickstack-postgrest
    ports:
      - "${PGRST_PORT:-3050}:3000"
    environment:
      PGRST_DB_URI: "postgres://kick:kickpass@postgres:5432/kickstack"
      PGRST_DB_SCHEMAS: "public"
      PGRST_DB_ANON_ROLE: "anon"
      PGRST_JWT_SECRET: "${JWT_SECRET}"
      PGRST_JWT_AUD: "authenticated"
      PGRST_SERVER_CORS_ALLOWED_ORIGINS: "*"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kickstack-network

  # GoTrue - Authentication service with JWT
  gotrue:
    image: supabase/gotrue:v2.151.0
    container_name: kickstack-gotrue
    ports:
      - "${GOTRUE_PORT:-9999}:9999"
    environment:
      # Required GoTrue configuration
      GOTRUE_API_HOST: "0.0.0.0"
      GOTRUE_API_PORT: "9999"
      API_EXTERNAL_URL: "http://localhost:9999"
      GOTRUE_SITE_URL: "http://localhost:3001"
      GOTRUE_URI_ALLOW_LIST: "*"
      
      # Database configuration
      GOTRUE_DB_DRIVER: "postgres"
      GOTRUE_DB_DATABASE_URL: "postgres://kick:kickpass@postgres:5432/kickstack?sslmode=disable"
      
      # JWT configuration
      GOTRUE_JWT_SECRET: "${JWT_SECRET:-changeme_use_openssl_rand_hex_32_to_generate}"
      GOTRUE_JWT_AUD: "authenticated"
      GOTRUE_JWT_DEFAULT_GROUP_NAME: "authenticated" 
      GOTRUE_JWT_ADMIN_ROLES: "service_role"
      GOTRUE_JWT_EXP: "3600"
      
      # Email/Signup configuration
      GOTRUE_DISABLE_SIGNUP: "false"
      GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
      GOTRUE_MAILER_AUTOCONFIRM: "true"
      GOTRUE_SMTP_HOST: "mailhog"
      GOTRUE_SMTP_PORT: "1025"
      GOTRUE_SMTP_USER: ""
      GOTRUE_SMTP_PASS: ""
      GOTRUE_SMTP_ADMIN_EMAIL: "admin@kickstack.local"
      
      # URL paths for email templates
      GOTRUE_MAILER_URLPATHS_INVITE: "/auth/v1/verify"
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: "/auth/v1/verify" 
      GOTRUE_MAILER_URLPATHS_RECOVERY: "/auth/v1/verify"
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: "/auth/v1/verify"
      GOTRUE_EXTERNAL_PHONE_ENABLED: "false"
      GOTRUE_SMS_AUTOCONFIRM: "false"
    depends_on:
      postgres:
        condition: service_healthy
      mailhog:
        condition: service_started
    networks:
      - kickstack-network

  # MinIO - S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: kickstack-minio
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_BROWSER_REDIRECT_URL: "http://localhost:9001"
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - kickstack-network
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MailHog - Email testing server for local development
  mailhog:
    image: mailhog/mailhog:latest
    container_name: kickstack-mailhog
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"  # SMTP server
      - "${MAILHOG_WEB_PORT:-8025}:8025"   # Web UI
    networks:
      - kickstack-network

volumes:
  postgres-data:
    driver: local
  minio-data:
    driver: local

networks:
  kickstack-network:
    driver: bridge